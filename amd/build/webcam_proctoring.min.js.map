{"version":3,"file":"webcam_proctoring.min.js","sources":["../src/webcam_proctoring.js"],"sourcesContent":["import $ from 'jquery';\nimport Ajax from 'core/ajax';\n\nexport const init = (props) => {\n    let isCameraAllowed = false;\n\n    window.console.log(isCameraAllowed);\n    window.console.log(props);\n\n    $('#id_submitbutton').prop(\"disabled\", true);\n    $('#id_web_proctoring').on('change', function() {\n        if (this.checked && isCameraAllowed) {\n            $('#id_submitbutton').prop(\"disabled\", false);\n        } else {\n            $('#id_submitbutton').prop(\"disabled\", true);\n        }\n    });\n\n    // Skip for summary page\n    if (document.getElementById(\"page-mod-quiz-summary\") !== null &&\n        document.getElementById(\"page-mod-quiz-summary\").innerHTML.length) {\n        return false;\n    }\n\n    // Skip for review page\n    if (document.getElementById(\"page-mod-quiz-review\") !== null &&\n        document.getElementById(\"page-mod-quiz-review\").innerHTML.length) {\n        return false;\n    }\n\n    let width = props.image_width; // We will scale the photo width to this\n    let height = 0; // This will be computed based on the input stream\n\n    let streaming = false;\n\n    const takepicturedelay = props.frequency;\n\n    if (props.is_quiz_started) {\n        // eslint-disable-next-line max-len\n        $('#mod_quiz_navblock').append(\n            '<div class=\"card-body p-3\"><h3 class=\"no text-left\">Webcam</h3> <br/>' +\n            '<video id=\"exproctor_video_wb\">Video stream not available.</video>' +\n            '<canvas id=\"exproctor_canvas_wb\" style=\"display:none;\"></canvas>' +\n            '<div class=\"exproctor_output_wb\" style=\"display:none;\">' +\n            '<img id=\"photo\" alt=\"The webcam capture will appear in this box.\"/></div></div>'\n        );\n    }\n\n    let video = document.getElementById('exproctor_video_wb');\n    let canvas = document.getElementById('exproctor_canvas_wb');\n    let photo = document.getElementById('exproctor_output_wb');\n\n    navigator.mediaDevices\n        .getUserMedia({video: true, audio: false})\n        .then((stream) => {\n            video.srcObject = stream;\n            video.play();\n            isCameraAllowed = true;\n        })\n        .catch((err) => {\n            window.console.error(`An error occurred: ${err}`);\n        });\n\n    const clearphoto = () => {\n        const context = canvas.getContext(\"2d\");\n        context.fillStyle = \"#AAA\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        const data = canvas.toDataURL(\"image/png\");\n        photo.setAttribute(\"src\", data);\n    };\n\n    const takepicture = () => {\n        if (props.is_quiz_started) {\n            const context = canvas.getContext(\"2d\");\n            if (width && height) {\n                canvas.width = width;\n                canvas.height = height;\n                context.drawImage(video, 0, 0, width, height);\n\n                const data = canvas.toDataURL(\"image/png\");\n                photo.setAttribute(\"src\", data);\n                props.webcampicture = data;\n\n                const api_function = 'quizaccess_exproctor_send_webcam_shot';\n                const params = {\n                    'courseid': props.courseid,\n                    'attemptid': props.id,\n                    'quizid': props.quizid,\n                    'webcamshot': data,\n                };\n\n                const request = {\n                    methodname: api_function,\n                    args: params\n                };\n\n                window.console.log(params);\n\n                Ajax.call([request])[0].done((data) => {\n                    window.console.log(data);\n                    if (data.warnings.length !== 0) {\n                        if (video) {\n                            Notification.addNotification({\n                                message: 'Something went wrong during taking the image.', type: 'error'\n                            });\n                        }\n                    }\n                }).fail((err) => {\n                    window.console.log(err);\n                    Notification.addNotification({message: 'API call failed!.', type: 'error'});\n                });\n            } else {\n                clearphoto();\n            }\n        }\n    };\n\n    if (video) {\n        video.addEventListener(\n            \"canplay\",\n            () => {\n                if (!streaming) {\n                    if (props.is_quiz_started) {\n                        width = 270;\n                    }\n                    height = video.videoHeight / (video.videoWidth / width);\n\n                    if (isNaN(height)) {\n                        height = width / (4 / 3);\n                    }\n\n                    video.setAttribute(\"width\", width);\n                    video.setAttribute(\"height\", height);\n                    canvas.setAttribute(\"width\", width);\n                    canvas.setAttribute(\"height\", height);\n                    streaming = true;\n                }\n            },\n            false\n        );\n        if (props.is_quiz_started) {\n            setInterval(takepicture, takepicturedelay);\n        }\n    }\n\n    const vidOff = () => {\n        video.srcObject.getVideoTracks().forEach((track) => track.stop());\n        isCameraAllowed = false;\n    };\n\n    if (props.is_close) {\n        vidOff();\n        return false;\n    }\n};"],"names":["props","isCameraAllowed","window","console","log","prop","on","this","checked","document","getElementById","innerHTML","length","width","image_width","height","streaming","takepicturedelay","frequency","is_quiz_started","append","video","canvas","photo","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","catch","err","error","takepicture","context","getContext","drawImage","data","toDataURL","setAttribute","webcampicture","api_function","params","courseid","id","quizid","request","methodname","args","call","done","warnings","Notification","addNotification","message","type","fail","fillStyle","fillRect","clearphoto","addEventListener","videoHeight","videoWidth","isNaN","setInterval","is_close","getVideoTracks","forEach","track","stop"],"mappings":"4WAGqBA,YACbC,iBAAkB,KAEtBC,OAAOC,QAAQC,IAAIH,iBACnBC,OAAOC,QAAQC,IAAIJ,2BAEjB,oBAAoBK,KAAK,YAAY,uBACrC,sBAAsBC,GAAG,UAAU,WAC7BC,KAAKC,SAAWP,oCACd,oBAAoBI,KAAK,YAAY,uBAErC,oBAAoBA,KAAK,YAAY,MAKU,OAArDI,SAASC,eAAe,0BACxBD,SAASC,eAAe,yBAAyBC,UAAUC,cACpD,KAI6C,OAApDH,SAASC,eAAe,yBACxBD,SAASC,eAAe,wBAAwBC,UAAUC,cACnD,MAGPC,MAAQb,MAAMc,YACdC,OAAS,EAETC,WAAY,QAEVC,iBAAmBjB,MAAMkB,UAE3BlB,MAAMmB,qCAEJ,sBAAsBC,OACpB,qVAQJC,MAAQZ,SAASC,eAAe,sBAChCY,OAASb,SAASC,eAAe,uBACjCa,MAAQd,SAASC,eAAe,uBAEpCc,UAAUC,aACLC,aAAa,CAACL,OAAO,EAAMM,OAAO,IAClCC,MAAMC,SACHR,MAAMS,UAAYD,OAClBR,MAAMU,OACN9B,iBAAkB,CAAlB,IAEH+B,OAAOC,MACJ/B,OAAOC,QAAQ+B,mCAA4BD,eAY7CE,YAAc,QACZnC,MAAMmB,gBAAiB,OACjBiB,QAAUd,OAAOe,WAAW,SAC9BxB,OAASE,OAAQ,CACjBO,OAAOT,MAAQA,MACfS,OAAOP,OAASA,OAChBqB,QAAQE,UAAUjB,MAAO,EAAG,EAAGR,MAAOE,cAEhCwB,KAAOjB,OAAOkB,UAAU,aAC9BjB,MAAMkB,aAAa,MAAOF,MAC1BvC,MAAM0C,cAAgBH,WAEhBI,aAAe,wCACfC,OAAS,UACC5C,MAAM6C,mBACL7C,MAAM8C,UACT9C,MAAM+C,kBACFR,MAGZS,QAAU,CACZC,WAAYN,aACZO,KAAMN,QAGV1C,OAAOC,QAAQC,IAAIwC,sBAEdO,KAAK,CAACH,UAAU,GAAGI,MAAMb,OAC1BrC,OAAOC,QAAQC,IAAImC,MACU,IAAzBA,KAAKc,SAASzC,QACVS,OACAiC,aAAaC,gBAAgB,CACzBC,QAAS,gDAAiDC,KAAM,aAI7EC,MAAMzB,MACL/B,OAAOC,QAAQC,IAAI6B,KACnBqB,aAAaC,gBAAgB,CAACC,QAAS,oBAAqBC,KAAM,iBA/C/D,YACTrB,QAAUd,OAAOe,WAAW,MAClCD,QAAQuB,UAAY,OACpBvB,QAAQwB,SAAS,EAAG,EAAGtC,OAAOT,MAAOS,OAAOP,cAEtCwB,KAAOjB,OAAOkB,UAAU,aAC9BjB,MAAMkB,aAAa,MAAOF,OA4ClBsB,KAKRxC,QACAA,MAAMyC,iBACF,WACA,KACS9C,YACGhB,MAAMmB,kBACNN,MAAQ,KAEZE,OAASM,MAAM0C,aAAe1C,MAAM2C,WAAanD,OAE7CoD,MAAMlD,UACNA,OAASF,OAAS,EAAI,IAG1BQ,MAAMoB,aAAa,QAAS5B,OAC5BQ,MAAMoB,aAAa,SAAU1B,QAC7BO,OAAOmB,aAAa,QAAS5B,OAC7BS,OAAOmB,aAAa,SAAU1B,QAC9BC,WAAY,MAGpB,GAEAhB,MAAMmB,iBACN+C,YAAY/B,YAAalB,0BAS7BjB,MAAMmE,UAJN9C,MAAMS,UAAUsC,iBAAiBC,SAASC,OAAUA,MAAMC,SAC1DtE,iBAAkB,GAKX"}