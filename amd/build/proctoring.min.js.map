{"version":3,"file":"proctoring.min.js","sources":["../src/proctoring.js"],"sourcesContent":["import $ from 'jquery';\nimport Ajax from 'core/ajax';\n\nexport const webcam_proctoring = (props) => {\n    let width = 350; // We will scale the photo width to this\n    let height = 0; // This will be computed based on the input stream\n\n    let streaming = false;\n\n    // const firstcalldelay = 3000; // 3 seconds after the page load\n    const takepicturedelay = 30000; // 30 seconds\n\n    if (props.is_quiz_started) {\n        // eslint-disable-next-line max-len\n        $('#mod_quiz_navblock').append('<div class=\"card-body p-3\"><h3 class=\"no text-left\">Webcam</h3> <br/>' + '<video id=\"video\">Video stream not available.</video><canvas id=\"canvas\" style=\"display:none;\"></canvas>' + '<div class=\"output\" style=\"display:none;\">' + '<img id=\"photo\" alt=\"The picture will appear in this box.\"/></div></div>');\n    }\n\n    let video = document.getElementById('video');\n    let canvas = document.getElementById('canvas');\n    let photo = document.getElementById('photo');\n\n    navigator.mediaDevices\n        .getUserMedia({video: true, audio: false})\n        .then((stream) => {\n            video.srcObject = stream;\n            video.play();\n        })\n        .catch((err) => {\n            window.console.error(`An error occurred: ${err}`);\n        });\n\n    const clearphoto = () => {\n        const context = canvas.getContext(\"2d\");\n        context.fillStyle = \"#AAA\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        const data = canvas.toDataURL(\"image/png\");\n        photo.setAttribute(\"src\", data);\n    };\n\n    const takepicture = () => {\n        if (props.is_quiz_started) {\n            const context = canvas.getContext(\"2d\");\n            if (width && height) {\n                canvas.width = width;\n                canvas.height = height;\n                context.drawImage(video, 0, 0, width, height);\n\n                const data = canvas.toDataURL(\"image/png\");\n                photo.setAttribute(\"src\", data);\n\n                const api_function = 'quizaccess_exproctor_send_webcam_shot';\n                const params = {\n                    'courseid': props.courseid,\n                    'webcamshotid': props.id,\n                    'quizid': props.quizid,\n                    'webcampicture': data,\n                };\n\n                Ajax.call([{methodname: api_function, args: params}])[0].done((data) => {\n                    if (data.warnings.length !== 0) {\n                        if (video) {\n                            Notification.addNotification({\n                                message: 'Something went wrong during taking the image.', type: 'error'\n                            });\n                        }\n                    }\n                }).fail(Notification.exception);\n            }\n        } else {\n            clearphoto();\n        }\n    };\n\n    if (video) {\n        video.addEventListener(\n            \"canplay\",\n            () => {\n                if (!streaming) {\n                    if (props.is_quiz_started) {\n                        width = 270;\n                    }\n                    height = video.videoHeight / (video.videoWidth / width);\n\n                    if (isNaN(height)) {\n                        height = width / (4 / 3);\n                    }\n\n                    video.setAttribute(\"width\", width);\n                    video.setAttribute(\"height\", height);\n                    canvas.setAttribute(\"width\", width);\n                    canvas.setAttribute(\"height\", height);\n                    streaming = true;\n                }\n            },\n            false\n        );\n        if (props.is_quiz_started) {\n            // setTimeout(takepicture, firstcalldelay);\n            setInterval(takepicture, takepicturedelay);\n        }\n\n        window.console.log(props);\n    }\n};"],"names":["props","width","height","streaming","is_quiz_started","append","video","document","getElementById","canvas","photo","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","catch","err","window","console","error","takepicture","context","getContext","drawImage","data","toDataURL","setAttribute","api_function","params","courseid","id","quizid","call","methodname","args","done","warnings","length","Notification","addNotification","message","type","fail","exception","fillStyle","fillRect","clearphoto","addEventListener","videoHeight","videoWidth","isNaN","setInterval","log"],"mappings":"+XAGkCA,YAC1BC,MAAQ,IACRC,OAAS,EAETC,WAAY,EAKZH,MAAMI,qCAEJ,sBAAsBC,OAAO,uSAG/BC,MAAQC,SAASC,eAAe,SAChCC,OAASF,SAASC,eAAe,UACjCE,MAAQH,SAASC,eAAe,SAEpCG,UAAUC,aACLC,aAAa,CAACP,OAAO,EAAMQ,OAAO,IAClCC,MAAMC,SACHV,MAAMW,UAAYD,OAClBV,MAAMY,UAETC,OAAOC,MACJC,OAAOC,QAAQC,mCAA4BH,eAY7CI,YAAc,QACZxB,MAAMI,gBAAiB,OACjBqB,QAAUhB,OAAOiB,WAAW,SAC9BzB,OAASC,OAAQ,CACjBO,OAAOR,MAAQA,MACfQ,OAAOP,OAASA,OAChBuB,QAAQE,UAAUrB,MAAO,EAAG,EAAGL,MAAOC,cAEhC0B,KAAOnB,OAAOoB,UAAU,aAC9BnB,MAAMoB,aAAa,MAAOF,YAEpBG,aAAe,wCACfC,OAAS,UACChC,MAAMiC,sBACFjC,MAAMkC,UACZlC,MAAMmC,qBACCP,oBAGhBQ,KAAK,CAAC,CAACC,WAAYN,aAAcO,KAAMN,UAAU,GAAGO,MAAMX,OAC9B,IAAzBA,KAAKY,SAASC,QACVnC,OACAoC,aAAaC,gBAAgB,CACzBC,QAAS,gDAAiDC,KAAM,aAI7EC,KAAKJ,aAAaK,gBApCd,YACTtB,QAAUhB,OAAOiB,WAAW,MAClCD,QAAQuB,UAAY,OACpBvB,QAAQwB,SAAS,EAAG,EAAGxC,OAAOR,MAAOQ,OAAOP,cAEtC0B,KAAOnB,OAAOoB,UAAU,aAC9BnB,MAAMoB,aAAa,MAAOF,OAiCtBsB,IAIJ5C,QACAA,MAAM6C,iBACF,WACA,KACShD,YACGH,MAAMI,kBACNH,MAAQ,KAEZC,OAASI,MAAM8C,aAAe9C,MAAM+C,WAAapD,OAE7CqD,MAAMpD,UACNA,OAASD,OAAS,EAAI,IAG1BK,MAAMwB,aAAa,QAAS7B,OAC5BK,MAAMwB,aAAa,SAAU5B,QAC7BO,OAAOqB,aAAa,QAAS7B,OAC7BQ,OAAOqB,aAAa,SAAU5B,QAC9BC,WAAY,MAGpB,GAEAH,MAAMI,iBAENmD,YAAY/B,YAzFK,KA4FrBH,OAAOC,QAAQkC,IAAIxD"}