{"version":3,"file":"proctoring.min.js","sources":["../src/proctoring.js"],"sourcesContent":["// const webcam_proctoring = () => {\n//     const width = 320; // We will scale the photo width to this\n//     let height = 0; // This will be computed based on the input stream\n//\n//     let streaming = false;\n//\n//     let video = document.getElementById('video');\n//     let canvas = document.getElementById('canvas');\n//     let photo = document.getElementById('photo');\n//\n//     navigator.mediaDevices\n//         .getUserMedia({video: true, audio: false})\n//         .then((stream) => {\n//             video.srcObject = stream;\n//             video.play();\n//         })\n//         .catch((err) => {\n//             window.console.error(`An error occurred: ${err}`);\n//         });\n//\n//     const clearphoto = () => {\n//         const context = canvas.getContext(\"2d\");\n//         context.fillStyle = \"#AAA\";\n//         context.fillRect(0, 0, canvas.width, canvas.height);\n//\n//         const data = canvas.toDataURL(\"image/png\");\n//         photo.setAttribute(\"src\", data);\n//     };\n//\n//     const takepicture = () => {\n//         const context = canvas.getContext(\"2d\");\n//         if (width && height) {\n//             canvas.width = width;\n//             canvas.height = height;\n//             context.drawImage(video, 0, 0, width, height);\n//\n//             const data = canvas.toDataURL(\"image/png\");\n//             photo.setAttribute(\"src\", data);\n//         } else {\n//             clearphoto();\n//         }\n//     };\n//\n//     if (video) {\n//         video.addEventListener(\n//             \"canplay\",\n//             () => {\n//                 if (!streaming) {\n//                     height = (video.videoHeight / video.videoWidth) * width;\n//\n//                     video.setAttribute(\"width\", width);\n//                     video.setAttribute(\"height\", height);\n//                     canvas.setAttribute(\"width\", width);\n//                     canvas.setAttribute(\"height\", height);\n//                     streaming = true;\n//                 }\n//             },\n//             false\n//         );\n//     }\n// };\n\nexport const init = (data) => {\n\n\n    window.console.log(data);\n\n\n};"],"names":["data","window","console","log"],"mappings":"yKA8DqBA,OAGjBC,OAAOC,QAAQC,IAAIH"}