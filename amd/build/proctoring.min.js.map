{"version":3,"file":"proctoring.min.js","sources":["../src/proctoring.js"],"sourcesContent":["import $ from 'jquery';\nimport Ajax from 'core/ajax';\n\n// let captureStream = new Object();\n\nexport const webcam_proctoring = (props) => {\n    let isCameraAllowed = false;\n\n    window.console.log(isCameraAllowed);\n\n    $(() => {\n        $('#id_submitbutton').prop(\"disabled\", true);\n        $('#id_web_proctoring').on('change', function() {\n            if (this.checked && isCameraAllowed) {\n                $('#id_submitbutton').prop(\"disabled\", false);\n            } else {\n                $('#id_submitbutton').prop(\"disabled\", true);\n            }\n        });\n    });\n\n    // Skip for summary page\n    if (document.getElementById(\"page-mod-quiz-summary\") !== null &&\n        document.getElementById(\"page-mod-quiz-summary\").innerHTML.length) {\n        return false;\n    }\n    // Skip for review page\n    if (document.getElementById(\"page-mod-quiz-review\") !== null &&\n        document.getElementById(\"page-mod-quiz-review\").innerHTML.length) {\n        return false;\n    }\n\n    let width = props.image_width; // We will scale the photo width to this\n    let height = 0; // This will be computed based on the input stream\n\n    let streaming = false;\n\n    // const firstcalldelay = 3000; // 3 seconds after the page load\n    const takepicturedelay = props.frequency;\n\n    if (props.is_quiz_started) {\n        // eslint-disable-next-line max-len\n        $('#mod_quiz_navblock').append('<div class=\"card-body p-3\"><h3 class=\"no text-left\">Webcam</h3> <br/>' + '<video id=\"video\">Video stream not available.</video><canvas id=\"canvas\" style=\"display:none;\"></canvas>' + '<div class=\"output\" style=\"display:none;\">' + '<img id=\"photo\" alt=\"The picture will appear in this box.\"/></div></div>');\n    }\n\n    let video = document.getElementById('video');\n    let canvas = document.getElementById('canvas');\n    let photo = document.getElementById('photo');\n\n    navigator.mediaDevices\n        .getUserMedia({video: true, audio: false})\n        .then((stream) => {\n            video.srcObject = stream;\n            video.play();\n            isCameraAllowed = true;\n        })\n        .catch((err) => {\n            window.console.error(`An error occurred: ${err}`);\n        });\n\n    const clearphoto = () => {\n        const context = canvas.getContext(\"2d\");\n        context.fillStyle = \"#AAA\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        const data = canvas.toDataURL(\"image/png\");\n        photo.setAttribute(\"src\", data);\n    };\n\n    const takepicture = () => {\n        if (props.is_quiz_started) {\n            const context = canvas.getContext(\"2d\");\n            if (width && height) {\n                canvas.width = width;\n                canvas.height = height;\n                context.drawImage(video, 0, 0, width, height);\n\n                const data = canvas.toDataURL(\"image/png\");\n                photo.setAttribute(\"src\", data);\n                props.webcampicture = data;\n\n                const api_function = 'quizaccess_exproctor_send_webcam_shot';\n                const params = {\n                    'courseid': props.courseid,\n                    'webcamshotid': props.id,\n                    'quizid': props.quizid,\n                    'webcampicture': data,\n                };\n\n                const request = {\n                    methodname: api_function,\n                    args: params\n                };\n\n                window.console.log(params);\n\n                // window.console.log(Ajax.call([request]));\n\n                Ajax.call([request])[0].done((data) => {\n                    window.console.log(data);\n                    if (data.warnings.length !== 0) {\n                        if (video) {\n                            Notification.addNotification({\n                                message: 'Something went wrong during taking the image.', type: 'error'\n                            });\n                        }\n                    }\n                }).fail(Notification.exception);\n            } else {\n                clearphoto();\n            }\n        }\n    };\n\n    if (video) {\n        video.addEventListener(\n            \"canplay\",\n            () => {\n                if (!streaming) {\n                    if (props.is_quiz_started) {\n                        width = 270;\n                    }\n                    height = video.videoHeight / (video.videoWidth / width);\n\n                    if (isNaN(height)) {\n                        height = width / (4 / 3);\n                    }\n\n                    video.setAttribute(\"width\", width);\n                    video.setAttribute(\"height\", height);\n                    canvas.setAttribute(\"width\", width);\n                    canvas.setAttribute(\"height\", height);\n                    streaming = true;\n                }\n            },\n            false\n        );\n        if (props.is_quiz_started) {\n            // setTimeout(takepicture, firstcalldelay);\n            setInterval(takepicture, takepicturedelay);\n        }\n    }\n\n    const vidOff = () => {\n        video.srcObject.getVideoTracks().forEach((track) => track.stop());\n        isCameraAllowed = false;\n    };\n\n    if (props.is_close) {\n        vidOff();\n        return false;\n    }\n};\n\nexport const screen_proctoring = async(props) => {\n    let isCameraAllowed = false;\n\n    $(() => {\n        $('#id_submitbutton').prop(\"disabled\", true);\n        $('#id_screen_proctoring').on('change', function() {\n            if (this.checked && isCameraAllowed) {\n                $('#id_submitbutton').prop(\"disabled\", false);\n            } else {\n                $('#id_submitbutton').prop(\"disabled\", true);\n            }\n        });\n    });\n\n    let width = props.image_width; // We will scale the photo width to this\n    let height = 0; // This will be computed based on the input stream\n\n    let streaming = false;\n\n    // Skip for summary page\n    if (document.getElementById(\"page-mod-quiz-summary\") !== null &&\n        document.getElementById(\"page-mod-quiz-summary\").innerHTML.length) {\n        return false;\n    }\n    // Skip for review page\n    if (document.getElementById(\"page-mod-quiz-review\") !== null &&\n        document.getElementById(\"page-mod-quiz-review\").innerHTML.length) {\n        return false;\n    }\n\n    if (props.is_quiz_started) {\n        // eslint-disable-next-line max-len\n        $('#mod_quiz_navblock').append('<div class=\"card-body p-3\"><h3 class=\"no text-left\">Screen</h3> <br/>' + '<video id=\"video_sc\">Screen stream not available.</video><canvas id=\"canvas_sc\" style=\"display:none;\"></canvas>' + '<div class=\"output\" style=\"display:none;\">' + '<img id=\"photo_sc\" alt=\"The picture will appear in this box.\"/></div></div>');\n    }\n\n    let video = document.getElementById('video_sc');\n    let canvas = document.getElementById('canvas_sc');\n    let photo = document.getElementById('photo_sc');\n\n    // const firstcalldelay = 3000; // 3 seconds after the page load\n    const takepicturedelay = props.frequency;\n\n    // const captureStream = await navigator.mediaDevices.getDisplayMedia({video: {cursor: \"always\"}, audio: false});\n    //\n    // video.srcObject = captureStream;\n    // context.drawImage(video, 0, 0, width, height);\n    // const frame = canvas.toDataURL(\"image/png\");\n    //\n    // // const take_screen_shot = () => {\n    // //\n    // // };\n    //\n    // if (props.is_quiz_started) {\n    //     window.console.log(\"quizaccess_exproctor_send_screen_shot\");\n    //     const api_function = 'quizaccess_exproctor_send_screen_shot';\n    //     const params = {\n    //         'courseid': props.courseid,\n    //         'screenshotid': props.id,\n    //         'quizid': props.quizid,\n    //         'screenpicture': frame,\n    //     };\n    //\n    //     const request = {\n    //         methodname: api_function,\n    //         args: params\n    //     };\n    //\n    //     window.console.log(params);\n    //\n    //     window.console.log(Ajax.call([request]));\n    //\n    //     Ajax.call([request])[0].done((data) => {\n    //         window.console.log(data);\n    //         if (data.warnings.length !== 0) {\n    //             if (video) {\n    //                 Notification.addNotification({\n    //                     message: 'Something went wrong during taking the screen-shot.', type: 'error'\n    //                 });\n    //             }\n    //         }\n    //     }).fail(Notification.exception);\n    // }\n\n    const captureStream = navigator.mediaDevices\n        .getDisplayMedia({\n            video: {\n                cursor: \"always\"\n            }, audio: false\n        })\n        .then((stream) => {\n            video.srcObject = stream;\n            video.play();\n            isCameraAllowed = true;\n        })\n        .catch((err) => {\n            window.console.error(`An error occurred: ${err}`);\n        });\n\n    const clearphoto = () => {\n        const context = canvas.getContext(\"2d\");\n        context.fillStyle = \"#AAA\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        const data = canvas.toDataURL(\"image/png\");\n        photo.setAttribute(\"src\", data);\n    };\n\n    const takescreenshot = () => {\n        window.console.log(\"Before if\");\n        if (props.is_quiz_started) {\n            const context = canvas.getContext(\"2d\");\n            window.console.log(props);\n            if (width && height) {\n                canvas.width = width;\n                canvas.height = height;\n                context.drawImage(video, 0, 0, width, height);\n\n                const data = canvas.toDataURL(\"image/png\");\n                photo.setAttribute(\"src\", data);\n                props.webcampicture = data;\n\n                const api_function = 'quizaccess_exproctor_send_screen_shot';\n                const params = {\n                    'courseid': props.courseid,\n                    'screenshotid': props.id,\n                    'quizid': props.quizid,\n                    'screenpicture': data,\n                };\n\n                const request = {\n                    methodname: api_function,\n                    args: params\n                };\n\n                window.console.log(params);\n\n                window.console.log(Ajax.call([request]));\n\n                Ajax.call([request])[0].done((data) => {\n                    window.console.log(data);\n                    if (data.warnings.length !== 0) {\n                        if (video) {\n                            Notification.addNotification({\n                                message: 'Something went wrong during taking the screen-shot.', type: 'error'\n                            });\n                        }\n                    }\n                }).fail(Notification.exception);\n            } else {\n                clearphoto();\n            }\n        }\n    };\n\n    if (video) {\n        video.addEventListener(\n            \"canplay\",\n            () => {\n                if (!streaming) {\n                    if (props.is_quiz_started) {\n                        width = 270;\n                    }\n                    height = video.videoHeight / (video.videoWidth / width);\n\n                    if (isNaN(height)) {\n                        height = width / (4 / 3);\n                    }\n\n                    video.setAttribute(\"width\", width);\n                    video.setAttribute(\"height\", height);\n                    canvas.setAttribute(\"width\", width);\n                    canvas.setAttribute(\"height\", height);\n                    streaming = true;\n                }\n            },\n            false\n        );\n        window.console.log(`Bottom: ${props}`);\n        window.console.log(props);\n        window.console.log(`Bottom: ${props}`);\n        window.console.log(isCameraAllowed);\n        if (props.is_quiz_started) {\n            window.console.log(\"Inside trigger\");\n            setInterval(takescreenshot, takepicturedelay);\n        }\n    }\n\n    const vidOff = () => {\n        captureStream.getTracks().forEach(track => track.stop());\n        isCameraAllowed = false;\n    };\n\n    if (props.is_close) {\n        vidOff();\n        return false;\n    }\n};\n\nexport const init = (props) => {\n    // window.console.log($('.quizstartbuttondiv'));\n\n    const submit_button_id = $('.quizstartbuttondiv').find(\"button\")[0].id;\n    let data = {\n        image_width: 320,\n        frequency: 3000,\n        is_quiz_started: false,\n        is_close: true\n    };\n\n    $(`#${submit_button_id}`).click(async function() {\n        data.is_close = false;\n\n        if (props.webcamproctoringrequired) {\n            webcam_proctoring(data);\n        }\n\n        if (props.screenproctoringrequired) {\n\n            screen_proctoring(data);\n        }\n    });\n\n    $('#id_cancel').click(function() {\n        data.is_close = true;\n        if (props.webcamproctoringrequired) {\n            webcam_proctoring(data);\n        }\n\n        if (props.screenproctoringrequired) {\n            screen_proctoring(data);\n        }\n    });\n};"],"names":["webcam_proctoring","props","isCameraAllowed","window","console","log","prop","on","this","checked","document","getElementById","innerHTML","length","width","image_width","height","streaming","takepicturedelay","frequency","is_quiz_started","append","video","canvas","photo","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","catch","err","error","takepicture","context","getContext","drawImage","data","toDataURL","setAttribute","webcampicture","api_function","params","courseid","id","quizid","request","methodname","args","call","done","warnings","Notification","addNotification","message","type","fail","exception","fillStyle","fillRect","clearphoto","addEventListener","videoHeight","videoWidth","isNaN","setInterval","is_close","getVideoTracks","forEach","track","stop","screen_proctoring","async","captureStream","getDisplayMedia","cursor","takescreenshot","Ajax","getTracks","submit_button_id","find","click","webcamproctoringrequired","screenproctoringrequired"],"mappings":"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"}